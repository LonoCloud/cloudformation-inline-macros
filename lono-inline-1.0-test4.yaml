AWSTemplateFormatVersion: "2010-09-09"
Description: test lono-macros part 2
Transform: [InlineJS-1_0]
#Transform: [InlinePy-1_0]

Parameters:
  PList:
    Type: CommaDelimitedList
    Default: "abc, def"

Metadata:
  JSMacros:
    TemplateByParam: |
        const {fragment, params: {ParamName, Fragments}} = event
        const lst = event.templateParameterValues[ParamName]
        let res = Array.isArray(Fragments) ? [] : fragment
        for (let [i, o] of lst.entries()) {
          const r = walk((v, k) => {
            return typeof v === 'string'
              ? v.replace(/\${i}/, i.toString()).replace(/\${v}/, o)
              : v}, Fragments)
          if (Array.isArray(res)) { res.push(...r) }
          else { Object.assign(res, r) }
        }
        return res

  PyMacros:
    TemplateByParam: |
        params = event['params']
        lst = event['templateParameterValues'][params['ParamName']]
        res = event['fragment']
        if isinstance(params['Fragments'], list): res = []
        def replacer(i, v, o):
            if type(v) == str:
                tmp = re.sub(r"\${i}", str(i), v, flags=re.MULTILINE)
                return re.sub(r"\${v}", v, tmp, flags=re.MULTILINE)
            else: return v 
        for [i, o] in enumerate(lst):
            r = walk(lambda v, *a: replacer(i, v, o), params['Fragments'])
            if isinstance(res, list): res.extend(r)
            else: res.update(r)
        return res


Resources:

  'Fn::Macro':
    Name: TemplateByParam
    Parameters:
      ParamName: PList
      Fragments:
        SSMDataA${i}:
          Type: 'AWS::SSM::Parameter'
          Properties:
            Type: String
            Value: "value for instance A${i}: ${v}"
        SSMDataB${i}:
          Type: 'AWS::SSM::Parameter'
          Properties:
            Type: String
            Value: "value for instance B${i}: ${v}"

  IPSet:
    Type: "AWS::WAFRegional::IPSet"
    Properties:
      Name: !Sub "${AWS::StackName}-IPSet"
      IPSetDescriptors:
        'Fn::Macro':
          Name: TemplateByParam
          Parameters: 
            ParamName: PList
            Fragments:
              - Type: IPV4
                Value: "${v}"
Outputs:
  'Fn::Macro':
    Name: TemplateByParam
    Parameters:
      ParamName: PList
      Fragments:
        SSMDataA${i}:
          Value: !Sub "${SSMDataA${i}.Value}"
        SSMDataB${i}:
          Value: !Sub "${SSMDataB${i}.Value}"
